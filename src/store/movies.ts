import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { IMovie, IMovieDetails } from "../models/movie.interface"
import { STATUS } from "../models/status.enum"
import { Api } from "../services/movies-api";
import { AppThunk, RootState } from "./store";

export interface MoviesState {
  movies: IMovie[],
  status: STATUS;
  search: null | string,
  rate: number | null,
  activeMovie: null | IMovieDetails
}

const initialState: MoviesState = {
  movies: [],
  status: STATUS.IDLE,
  search: null,
  rate: null,
  activeMovie: null
};

export const discoverAsync = createAsyncThunk(
  'movies/fetchDiscover',
  async () => {
    const response = await Api.discover();
    return response;
  }
);

export const searchAsync = createAsyncThunk(
  'movies/fetchSearch',
  async (token: string) => {
    const response = await Api.search(token);
    return response;
  }
);

export const search = (query: string | null): AppThunk => (dispatch) => {
  if (!!query) {
    dispatch(searchAsync(query));
  } else {
    dispatch(discoverAsync());
  }

  dispatch(moviesSlice.actions.search(query));
};

export const loadMovieAsync = createAsyncThunk(
  'movie/fetchGetById',
  async (id: number) => {
    const response = await Api.getById(id);
    return response;
  }
);

export const selectStatus = (state: RootState) => state.movies.status;
export const selectMovies = (state: RootState) => state.movies.movies;
export const selectMoviesByRanking = (state: RootState, rate?: number | null) => !rate ? selectMovies(state) : state.movies.movies.filter(movie => movie.vote_average > rate)
export const selectActiveMovie = (state: RootState) => state.movies.activeMovie;
export const selectRate = (state: RootState) => state.movies.rate;
export const selectSearchQuery = (state: RootState) => state.movies.search;

export const moviesSlice = createSlice({
  name: 'movies',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    rate: (state, action: PayloadAction<number | null>) => {
      state.rate = action.payload
    },
    search: (state, action: PayloadAction<string | null>) => {
      state.search = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(discoverAsync.pending, (state) => {
        state.status = STATUS.LOADING;
      })
      .addCase(discoverAsync.fulfilled, (state, action) => {
        state.status = STATUS.IDLE;
        state.movies = action.payload.results;
      })
      .addCase(discoverAsync.rejected, (state, action) => {
        state.status = STATUS.FAILED;
        state.movies = [];
      })
      .addCase(searchAsync.pending, (state) => {
        state.status = STATUS.LOADING;
      })
      .addCase(searchAsync.fulfilled, (state, action) => {
        state.status = STATUS.IDLE;
        state.movies = action.payload.results;
      })
      .addCase(searchAsync.rejected, (state, action) => {
        state.status = STATUS.FAILED;
        state.movies = [];
      })
      .addCase(loadMovieAsync.pending, (state) => {
        state.status = STATUS.LOADING;
        state.activeMovie = null;
      })
      .addCase(loadMovieAsync.fulfilled, (state, action) => {
        state.status = STATUS.IDLE;
        state.activeMovie = action.payload;
      })
      .addCase(loadMovieAsync.rejected, (state, action) => {
        state.status = STATUS.FAILED;
        state.activeMovie = null;
      });
  },
});

export const moviesReducer = moviesSlice.reducer;
export const { rate } = moviesSlice.actions;